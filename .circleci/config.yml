version: 2.1

# ---------------------------------------------------------------------------- #
#                                   Workflows                                  #
# ---------------------------------------------------------------------------- #

workflows:
  Run tests:
    when:
      equal: [ test, << pipeline.parameters.pipeline_action >> ]
    jobs:
      - Install dependencies
      - Build:
          requires:
            - Install dependencies

      # ----------------------- E2E pipeline for each project ---------------------- #

      - Run Playwright tests:
          name: Run pos-web tests
          project: pos-web
          requires:
            - Build

  # ------------------------ Report generation pipelines ----------------------- #

      - Collect and generate Allure Report:
          name: Collect and generate Allure Report for pos-web
          project: pos-web
          requires:
            - Run pos-web tests

  # ------------------------ Report deploying pipelines ------------------------ #

  Deploy reports:
    when:
      equal: [ deploy-report, << pipeline.parameters.pipeline_action >> ]
    jobs:
      - Deploy project report:
          name: Deploy report for project pos-web
          project: pos-web
          artifact_build_number: << pipeline.parameters.artifact_build_number >>

# ---------------------------------------------------------------------------- #
#                                    Aliases                                   #
# ---------------------------------------------------------------------------- #

aliases:
  - &param_pipeline_action
    pipeline_action:
      type: enum
      enum: [test, deploy-report]
      default: test
    artifact_build_number:
      type: string
      default: ''

  - &restore_pnpm_cache
    restore_cache:
      name: Restore pnpm cache
      keys:
        - pnpm-{{ checksum "pnpm-lock.yaml" }}
        - pnpm-

  - &install_dependencies
    run:
      name: Install dependencies using pnpm
      command: |
        corepack enable
        pnpm config set store-dir ~/.pnpm-store
        pnpm install --ignore-scripts

  - &install_dependencies_with_sudo
    run:
      name: Install dependencies using pnpm
      command: |
        sudo npm install -g corepack@latest
        sudo corepack enable
        pnpm config set store-dir ~/.pnpm-store
        pnpm install --ignore-scripts

  - &install_pzstd
    run:
      name: Install pzstd compression algorithm
      command: |
        sudo apt-get update
        sudo apt-get install -y pzstd

  - &build
    run:
      name: Build monorepo packages
      environment:
        TURBO_UI: 'false'
      command: pnpm build

# ---------------------------------------------------------------------------- #
#                                  Parameters                                  #
# ---------------------------------------------------------------------------- #

parameters:
  *param_pipeline_action

# ---------------------------------------------------------------------------- #
#                                   Commands                                   #
# ---------------------------------------------------------------------------- #

commands:
  compress_directory_using_zstd:
    parameters:
      target_directory:
        type: string
      output_file:
        type: string
    steps:
      - *install_pzstd
      - run:
          name: 'Compress directory: << parameters.target_directory >>'
          command: |
            echo "Pre-compression size"
            du -sh << parameters.target_directory >>
            tar --use-compress-program pzstd -cf << parameters.output_file >> << parameters.target_directory >>
            echo "Post-compression size"
            du -sh << parameters.output_file >>

  decompress_using_zstd:
    parameters:
      target_file:
        type: string
    steps:
      - *install_pzstd
      - run:
          name: 'De-compress file: << parameters.target_file >>'
          command: tar --use-compress-program pzstd -xf << parameters.target_file >>

  trigger_pipeline:
    parameters:
      *param_pipeline_action
    steps:
      - run:
          name: Trigger pipeline using CircleCI API
          command: |
            curl -X POST \
            "https://circleci.com/api/v2/project/circleci/$ORGANIZATION_ID/$PROJECT_ID/pipeline/run" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            -H "Circle-Token: $PIPELINE_TRIGGER_TOKEN" \
            -d '{
              "definition_id": "'"$PIPELINE_DEFINITION_ID"'",
              "config": {
                "branch": "'"$CIRCLE_BRANCH"'"
              },
              "checkout": {
                "branch": "'"$CIRCLE_BRANCH"'"
              },
              "parameters": {
                "pipeline_action": "<< parameters.pipeline_action >>"
              }
            }'

# ---------------------------------------------------------------------------- #
#                                     Jobs                                     #
# ---------------------------------------------------------------------------- #

jobs:
  Install dependencies:
    docker:
      - image: cimg/node:lts
    resource_class: small
    steps:
      - checkout
      - *restore_pnpm_cache
      - *install_dependencies
      - save_cache:
          name: Save pnpm cache
          key: pnpm-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - ~/.pnpm-store

  Build:
    docker:
      - image: cimg/node:lts
    resource_class: small
    steps:
      - checkout
      - *restore_pnpm_cache
      - *install_dependencies
      - *build

  Run Playwright tests:
    docker:
      - image: cimg/openjdk:23.0-node
    resource_class: small
    parallelism: 3
    parameters:
      project:
        type: string
    steps:
      - checkout
      - *restore_pnpm_cache
      # this Convenience Image requires a sudo permission to use Corepack
      # that's why we duplicate the dependencies installing steps with the sudo access here
      - *install_dependencies_with_sudo
      - *build
      - run:
          name: Install Playwright browsers
          command: pnpm playwright:install-browsers
      - run:
          name: 'Run tests for project: << parameters.project >>'
          command: |
            cd e2e/<< parameters.project >>
            pnpm test --shard=$((${CIRCLE_NODE_INDEX}+1))/${CIRCLE_NODE_TOTAL}

      - run:
          when: always
          name: Verify test results
          command: |
            ls -la e2e/<< parameters.project >>
            ls -la e2e/<< parameters.project >>/allure-results
            exit 0

      - store_test_results:
          path: e2e/<< parameters.project >>/playwright-report/results.xml
      - persist_to_workspace:
          root: .
          paths:
            - e2e/<< parameters.project >>/allure-results

  Collect and generate Allure Report:
    docker:
      - image: cimg/openjdk:23.0-node
    resource_class: small
    parameters:
      project:
        type: string
    steps:
      - checkout
      - *restore_pnpm_cache
      - *install_dependencies_with_sudo

      - attach_workspace:
          at: .

      - run:
          name: Verify Allure results
          command: |
            echo "Verifying Allure results for project: << parameters.project >>"
            ls -la e2e/<< parameters.project >>/allure-results
            du -sh e2e/<< parameters.project >>/allure-results
      - run:
          name: Generate Allure Report
          command: |
            cd e2e/<< parameters.project >>
            pnpm allure generate allure-results
      - run:
          name: Verify generated Allure report
          command: |
            echo "Verifying generated Allure report for project: << parameters.project >>"
            ls -la e2e/<< parameters.project >>/allure-report
            du -sh e2e/<< parameters.project >>/allure-report

      - compress_directory_using_zstd:
          target_directory: e2e/<< parameters.project >>/allure-report
          output_file: 'allure-report.tar.zst'
      - store_artifacts:
          path: 'allure-report.tar.zst'
          destination: 'allure-report.tar.zst'

      - trigger_pipeline:
          pipeline_action: deploy-report
          artifact_build_number: $CIRCLE_BUILD_NUM

  Deploy project report:
    docker:
      - image: cimg/base:current
    resource_class: small
    parameters:
      project:
        type: string
      artifact_build_number:
        type: string
    steps:
      - run:
          name: Verify pipeline parameters
          command: |
            echo "Target project: << parameters.project >>"
            echo "Artifact build number: << parameters.artifact_build_number >>"
